public static int[] embedTo3PixelBlock(int leftPixel, int basePixel, int rightPixel, int[][] rangeTable){
		int basePixel3LSB = (byte) (1 & ((1 << 3) - 1)); 
		int secretMessageLSB = Integer.parseInt(secretMessage.peekSecretBits(3), 2);
		int embeddedBasePixel = replaceLeastSignificantBit(basePixel, 3, Integer.parseInt(secretMessage.getSecretBits(3), 2));
		int baseDifference = basePixel3LSB - secretMessageLSB;
		
		if(baseDifference > Math.pow(2, 3) && (basePixel + Math.pow(2, 3) >= 0) && (basePixel + Math.pow(2, 3) <= 255)) {
			embeddedBasePixel += Math.pow(2, 3); 
		} else if(baseDifference < (-1 * Math.pow(2,3)) && (basePixel - Math.pow(2, 3) <= 255) && (basePixel - Math.pow(2, 3) >= 0)) {
			embeddedBasePixel -= Math.pow(2, 3);
		} else {
			//do nothing;
		}
		
		int diffLeft = Math.abs(embeddedBasePixel - leftPixel);
		int diffRight = Math.abs(embeddedBasePixel - rightPixel);
		
		int leftDiffRangeIndex = locateTableRange(diffLeft, rangeTable);
		int rightDiffRangeIndex = locateTableRange(diffRight, rangeTable);
//		System.out.println("indeces "+leftDiffRangeIndex+" "+rightDiffRangeIndex);
		int embeddableBitsLeft = rangeTable[2][leftDiffRangeIndex];		
		int embeddableBitsRight = rangeTable[2][rightDiffRangeIndex];
//		System.out.println("embeddable: "+embeddableBitsLeft+" "+embeddableBitsRight);
		
		int s1 = Integer.parseInt(secretMessage.getSecretBits(embeddableBitsLeft), 2);
		int s2 = Integer.parseInt(secretMessage.getSecretBits(embeddableBitsRight), 2);
		
//		System.out.println("s1 "+s1+" s2 "+s2);
		
		int newDiffLeft = rangeTable[0][leftDiffRangeIndex] + s1;
		int newDiffRight = rangeTable[0][rightDiffRangeIndex] + s2;
//		System.out.println(newDiffLeft+" "+newDiffRight);
		
		int leftPixelTemp1 = embeddedBasePixel + newDiffLeft;
		int leftPixelTemp2 = embeddedBasePixel - newDiffLeft;
		int rightPixelTemp1 = embeddedBasePixel + newDiffRight;
		int rightPixelTemp2 = embeddedBasePixel - newDiffRight;
		
		int embeddedLeftPixel = (Math.abs(leftPixel - leftPixelTemp1) < Math.abs(leftPixel - leftPixelTemp2)) ? 
								 leftPixelTemp1 : leftPixelTemp2;
		int embeddedRightPixel = (Math.abs(rightPixel - rightPixelTemp1) < Math.abs(rightPixel - rightPixelTemp2)) ?
								  rightPixelTemp1 : rightPixelTemp2;
		
//		System.out.println(embeddedLeftPixel+" "+embeddedRightPixel);
		//replace old val with new val
		basePixel = embeddedBasePixel;
		leftPixel = embeddedLeftPixel;
		rightPixel = embeddedRightPixel;
		
		return new int[] {embeddedBasePixel, embeddedLeftPixel, embeddedRightPixel};
	}